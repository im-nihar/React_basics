[{"D:\\projects\\react_udemy_course\\react-lessons-20210616T153953Z-001\\git_project\\React_basics\\src\\index.js":"1","D:\\projects\\react_udemy_course\\react-lessons-20210616T153953Z-001\\git_project\\React_basics\\src\\App.js":"2","D:\\projects\\react_udemy_course\\react-lessons-20210616T153953Z-001\\git_project\\React_basics\\src\\components\\CourseGoals\\CourseGoalList\\CourseGoalList.js":"3","D:\\projects\\react_udemy_course\\react-lessons-20210616T153953Z-001\\git_project\\React_basics\\src\\components\\CourseGoals\\CourseInput\\CourseInput.js":"4","D:\\projects\\react_udemy_course\\react-lessons-20210616T153953Z-001\\git_project\\React_basics\\src\\components\\CourseGoals\\CourseGoalItem\\CourseGoalItem.js":"5","D:\\projects\\react_udemy_course\\react-lessons-20210616T153953Z-001\\git_project\\React_basics\\src\\components\\UI\\Button\\Button.js":"6"},{"size":169,"mtime":1616593574000,"results":"7","hashOfConfig":"8"},{"size":1533,"mtime":1616593574000,"results":"9","hashOfConfig":"8"},{"size":461,"mtime":1616593574000,"results":"10","hashOfConfig":"8"},{"size":3054,"mtime":1623764979000,"results":"11","hashOfConfig":"8"},{"size":393,"mtime":1616593574000,"results":"12","hashOfConfig":"8"},{"size":808,"mtime":1623764444000,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1k2cug8",{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},"D:\\projects\\react_udemy_course\\react-lessons-20210616T153953Z-001\\git_project\\React_basics\\src\\index.js",[],"D:\\projects\\react_udemy_course\\react-lessons-20210616T153953Z-001\\git_project\\React_basics\\src\\App.js",[],"D:\\projects\\react_udemy_course\\react-lessons-20210616T153953Z-001\\git_project\\React_basics\\src\\components\\CourseGoals\\CourseGoalList\\CourseGoalList.js",[],"D:\\projects\\react_udemy_course\\react-lessons-20210616T153953Z-001\\git_project\\React_basics\\src\\components\\CourseGoals\\CourseInput\\CourseInput.js",["28"],"import React, { useState } from 'react';\nimport styled from 'styled-components';\n\nimport Button from '../../UI/Button/Button';\nimport styles from './CourseInput.module.css';\n\n// const FormControl = styled.div`\n//   margin: 0.5rem 0;\n\n// & label {\n//   font-weight: bold;\n//   display: block;\n//   margin-bottom: 0.5rem;\n\n//   //dynamic value addition\n//   color: ${props => props.invalid ? 'red' : 'black'};\n// }\n\n// &  input {\n//   display: block;\n//   width: 100%;\n//   border: 1px solid ${props => (props.invalid ? 'red' : '#ccc')};\n//   background:${props => props.invalid ? '#ffd7d7' : 'transparent'};\n//   font: inherit;\n//   line-height: 1.5rem;\n//   padding: 0 0.25rem;\n// }\n\n// &  input:focus {\n//   outline: none;\n//   background: #fad0ec;\n//   border-color: #8b005d;\n// }\n\n// /* input dynmically css */\n\n// /* &.invalid input {\n//   border-color: red;\n//   background: #ffd7d7;\n// }\n\n// &.invalid label {\n//   color: red;\n// } */\n// `;\n\n\nconst CourseInput = props => {\n  const [enteredValue, setEnteredValue] = useState('');\n  const [isValid, setIsValid] = useState(true)\n\n  const goalInputChangeHandler = event => {\n    setEnteredValue(event.target.value);\n    if (event.target.value.trim().length > 0) {\n      setIsValid(true);\n    }\n  };\n\n  const formSubmitHandler = event => {\n    event.preventDefault();\n    if (enteredValue.trim().length === 0) {\n      setIsValid(false);\n      return;\n    }\n    props.onAddGoal(enteredValue);\n  };\n\n  return (\n\n    // One way to dynamically change styles\n\n    // <form onSubmit={formSubmitHandler}>\n    //   <div className=\"form-control\">\n    //     <label style={{ color: !isValid ? 'red' : 'black' }}>Course Goal</label>\n    //     <input\n    //       style={{\n    //         borderColor: !isValid ? 'red' : '#ccc',\n    //         background: !isValid ? 'salmon' : 'transparent',\n    //       }}\n    //       type=\"text\" onChange={goalInputChangeHandler} />\n    //   </div>\n    //   <Button type=\"submit\">Add Goal</Button>\n    // </form>\n\n\n    // To dynamically change styles using FormControl styled\n\n    // <form onSubmit={formSubmitHandler}>\n    //   <FormControl className={!isValid && 'invalid'}>\n    //     <label >Course Goal</label>\n    //     <input type=\"text\" onChange={goalInputChangeHandler} />\n    //   </FormControl>\n    //   <Button type=\"submit\">Add Goal</Button>\n    // </form>\n\n    // passing props so that we can use in styled components.\n\n    // <form onSubmit={formSubmitHandler}>\n    //   <FormControl invalid={!isValid}>\n    //     <label >Course Goal</label>\n    //     <input type=\"text\" onChange={goalInputChangeHandler} />\n    //   </FormControl>\n    //   <Button type=\"submit\">Add Goal</Button>\n    // </form>\n\n    //by using styles modules\n\n    <form onSubmit={formSubmitHandler}>\n      <div className={`${styles['form-control']} ${!isValid && styles.invalid}`}>\n        <label >Course Goal</label>\n        <input type=\"text\" onChange={goalInputChangeHandler} />\n      </div>\n      <Button type=\"submit\">Add Goal</Button>\n    </form>\n  );\n};\n\nexport default CourseInput;\n","D:\\projects\\react_udemy_course\\react-lessons-20210616T153953Z-001\\git_project\\React_basics\\src\\components\\CourseGoals\\CourseGoalItem\\CourseGoalItem.js",[],"D:\\projects\\react_udemy_course\\react-lessons-20210616T153953Z-001\\git_project\\React_basics\\src\\components\\UI\\Button\\Button.js",["29"],"import styled from 'styled-components';\n\nimport styles from './Button.module.css';\n\n// const Button = styled.button`\n//   width:100%;\n//   font: inherit;\n//   padding: 0.5rem 1.5rem;\n//   border: 1px solid #8b005d;\n//   color: white;\n//   background: #8b005d;\n//   box-shadow: 0 0 4px rgba(0, 0, 0, 0.26);\n//   cursor: pointer;\n\n// // using & instead button:foucs{}\n// &:focus {\n//   outline: none;\n// }\n\n// &:hover,\n// &:active {\n//   background: #ac0e77;\n//   border-color: #ac0e77;\n//   box-shadow: 0 0 8px rgba(0, 0, 0, 0.26);\n// }\n\n// //adding media queries\n// @media (min-width:768px){\n//   width:auto;\n// }\n// `;\n\nconst Button = props => {\n  return (\n    <button type={props.type} className={styles.button} onClick={props.onClick}>\n      {props.children}\n    </button>\n  );\n};\n\nexport default Button;\n",{"ruleId":"30","severity":1,"message":"31","line":2,"column":8,"nodeType":"32","messageId":"33","endLine":2,"endColumn":14},{"ruleId":"30","severity":1,"message":"31","line":1,"column":8,"nodeType":"32","messageId":"33","endLine":1,"endColumn":14},"no-unused-vars","'styled' is defined but never used.","Identifier","unusedVar"]